---
- name: Configure Servers
  hosts: servers
  roles:
    - role: geerlingguy.docker
      become: true
  tasks:

    - name: Add admin SSH public key (web)
      ansible.builtin.copy:
        src: secrets/ssh/admin_ssh.pub
        dest: "{{ ansible_env['HOME'] }}/.ssh/id_rsa.pub"
        owner: "{{ ansible_env['USER'] }}"
        group: "{{ ansible_env['USER'] }}"
        mode: "0600"
      when: inventory_hostname == 'web'

    - name: Authorize admin SSH public key
      ansible.posix.authorized_key:
        user: "{{ ansible_env['USER'] }}"
        state: present
        key: "{{ lookup('file', 'secrets/ssh/admin_ssh.pub') }}"

    - name: Copy machine directory
      ansible.builtin.copy:
        src: "{{ inventory_hostname }}/"
        dest: "{{ ansible_env['HOME'] }}"
        owner: "{{ ansible_env['USER'] }}"
        group: "{{ ansible_env['USER'] }}"
        mode: "0755"

    - name: Add machines to /etc/hosts
      become: true
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: "{{ item.ip }} {{ item.alias }}"
      loop:
        - { ip: "{{ hostvars['web']['ansible_enp0s8']['ipv4']['address'] }}", alias: imovies.ch }
        - { ip: "{{ hostvars['db']['ansible_enp0s8']['ipv4']['address'] }}", alias: db.imovies.ch }
        - { ip: "{{ hostvars['ca']['ansible_enp0s8']['ipv4']['address'] }}", alias: ca.imovies.ch }
        - { ip: "{{ hostvars['log']['ansible_enp0s8']['ipv4']['address'] }}", alias: log.imovies.ch }
        - { ip: "{{ hostvars['bak']['ansible_enp0s8']['ipv4']['address'] }}", alias: bak.imovies.ch }
    
    - name: Enable firewall and set default deny policy
      become: true
      community.general.ufw:
        state: enabled
        default: deny
        logging: true

    - name: Set firewall allow rules
      become: true
      community.general.ufw:
        rule: allow
        port: "{{ item.port | default(omit) }}"
        proto: "{{ item.proto | default(omit) }}"
        src: "{{ item.src | default(omit) }}"
      when: item.hostname is not defined or inventory_hostname == item.hostname
      loop:
        - { port: "22", proto: tcp, src: "{{ ansible_env['SSH_CLIENT'].split() | first }}" }
        - { port: "22", proto: tcp, src: "{{ hostvars['web']['ansible_enp0s8']['ipv4']['address'] }}" }
        - { hostname: bak, port: "443", proto: tcp, src: "{{ hostvars['db']['ansible_enp0s8']['ipv4']['address'] }}" }
        - { hostname: bak, port: "443", proto: tcp, src: "{{ hostvars['ca']['ansible_enp0s8']['ipv4']['address'] }}" }
        - { hostname: bak, port: "443", proto: tcp, src: "{{ hostvars['log']['ansible_enp0s8']['ipv4']['address'] }}" }
        - { hostname: log, port: "514", proto: tcp, src: "{{ hostvars['web']['ansible_enp0s8']['ipv4']['address'] }}" }
        - { hostname: log, port: "514", proto: tcp, src: "{{ hostvars['ca']['ansible_enp0s8']['ipv4']['address'] }}" }
        - { hostname: ca, port: "443", proto: tcp, src: "{{ hostvars['web']['ansible_enp0s8']['ipv4']['address'] }}" }
        - { hostname: db, port: "3306", proto: tcp, src: "{{ hostvars['web']['ansible_enp0s8']['ipv4']['address'] }}" }
        - { hostname: db, port: "3306", proto: tcp, src: "{{ hostvars['bak']['ansible_enp0s8']['ipv4']['address'] }}" }
        - { hostname: web, port: "22", proto: tcp }
        - { hostname: web, port: "443", proto: tcp }

    - name: Create and start services
      become: true
      ansible.builtin.shell:
        cmd: docker compose up --build -d
        chdir: "{{ ansible_env['HOME'] }}"

    - name: Change vagrant password
      become: true
      ansible.builtin.user: 
        name: vagrant
        password: "{{ item.pw | password_hash('sha512') }}"
      when: inventory_hostname == item.hostname
      loop:
        - { hostname: bak, pw: "{{ lookup('file', 'secrets/user_passwords/bak_pw.txt') }}" }
        - { hostname: log, pw: "{{ lookup('file', 'secrets/user_passwords/log_pw.txt') }}" }
        - { hostname: db, pw: "{{ lookup('file', 'secrets/user_passwords/db_pw.txt') }}" }
        - { hostname: ca, pw: "{{ lookup('file', 'secrets/user_passwords/ca_pw.txt') }}" }
        - { hostname: web, pw: "{{ lookup('file', 'secrets/user_passwords/web_pw.txt') }}" }

    - name: Disallow passwordless sudo
      become: true
      copy:
        content: "vagrant ALL=(ALL) ALL"
        dest: "/etc/sudoers.d/vagrant"
        owner: root
        group: root
        mode: "0600"

- name: Configure Clients
  hosts: clients
  tasks:
    - name: Add admin SSH private key (client)
      ansible.builtin.copy:
        src: secrets/ssh/admin_ssh
        dest: "{{ ansible_env['HOME'] }}/.ssh/id_rsa"
        owner: "{{ ansible_env['USER'] }}"
        group: "{{ ansible_env['USER'] }}"
        mode: "0600"

    - name: Add admin SSH public key (client)
      ansible.builtin.copy:
        src: secrets/ssh/admin_ssh.pub
        dest: "{{ ansible_env['HOME'] }}/.ssh/id_rsa.pub"
        owner: "{{ ansible_env['USER'] }}"
        group: "{{ ansible_env['USER'] }}"
        mode: "0600"

    - name: Add web to /etc/hosts
      become: true
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: "{{ item.ip }} {{ item.alias }}"
      loop:
        - { ip: "{{ hostvars['web']['ansible_enp0s9']['ipv4']['address'] }}", alias: imovies.ch }

    - name: Install xubuntu-desktop
      become: true
      ansible.builtin.apt:
        name: xubuntu-desktop
        update_cache: true
